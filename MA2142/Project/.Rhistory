y1 <- 1 + x + err1
y2 <- 1 + x + err2
## perform Goldfeld-Quandt test
gqtest(y1 ~ x)
gqtest(y2 ~ x)
# }
# NOT RUN {
## generate a regressor
x <- 0.01*c(1:100)
## generate heteroskedastic and homoskedastic disturbances
err1 <- c(rnorm(50, sd=1), rnorm(50, sd=2))
err2 <- rnorm(100)
## generate a linear relationship
y1 <- 1 + x + err1
y2 <- 1 + x + err2
## perform Goldfeld-Quandt test
gqtest(y1 ~ x)
gqtest(y2 ~ x)
# }
# NOT RUN {
## generate a regressor
x <- 0.01*c(1:100)
## generate heteroskedastic and homoskedastic disturbances
err1 <- c(rnorm(50, sd=1), rnorm(50, sd=2))
err2 <- rnorm(100)
## generate a linear relationship
y1 <- 1 + x
y2 <- 1 + x + err2
## perform Goldfeld-Quandt test
gqtest(y1 ~ x)
gqtest(y2 ~ x)
# }
# NOT RUN {
## generate a regressor
x <- 0.01*c(1:100)
## generate heteroskedastic and homoskedastic disturbances
err1 <- c(rnorm(50, sd=1), rnorm(50, sd=2))
err2 <- rnorm(100)
## generate a linear relationship
y1 <- 1 + x
y2 <- 1 + x
## perform Goldfeld-Quandt test
gqtest(y1 ~ x)
gqtest(y2 ~ x)
# }
# NOT RUN {
## generate a regressor
x <- 0.01*c(1:100)
## generate heteroskedastic and homoskedastic disturbances
err1 <- c(rnorm(50, sd=1), rnorm(50, sd=2))
err2 <- rnorm(100)
## generate a linear relationship
y1 <- x
y2 <- x
## perform Goldfeld-Quandt test
gqtest(y1 ~ x)
gqtest(y2 ~ x)
# }
# NOT RUN {
## generate a regressor
x <- 0.01*c(1:100)
## generate heteroskedastic and homoskedastic disturbances
err1 <- c(rnorm(50, sd=1), rnorm(50, sd=2))
err2 <- rnorm(100)
## generate a linear relationship
y1 <- x + err1
y2 <- x + err2
## perform Goldfeld-Quandt test
gqtest(y1 ~ x)
gqtest(y2 ~ x)
# }
# NOT RUN {
## generate a regressor
x <- 0.01*c(1:100)
## generate heteroskedastic and homoskedastic disturbances
err1 <- c(rnorm(50, sd=1), rnorm(50, sd=2))
err2 <- rnorm(100)
## generate a linear relationship
y1 <- x + err1
y2 <- x + err2
## perform Goldfeld-Quandt test
gqtest(y1 ~ x, alternative="less"")
gqtest(y2 ~ x)
# }
# NOT RUN {
## generate a regressor
x <- 0.01*c(1:100)
## generate heteroskedastic and homoskedastic disturbances
err1 <- c(rnorm(50, sd=1), rnorm(50, sd=2))
err2 <- rnorm(100)
## generate a linear relationship
y1 <- x + err1
y2 <- x + err2
## perform Goldfeld-Quandt test
gqtest(y1 ~ x, alternative="less"")
gqtest(y2 ~ x)
# }
# NOT RUN {
## generate a regressor
x <- 0.01*c(1:100)
## generate heteroskedastic and homoskedastic disturbances
err1 <- c(rnorm(50, sd=1), rnorm(50, sd=2))
err2 <- rnorm(100)
## generate a linear relationship
y1 <- x + err1
y2 <- x + err2
## perform Goldfeld-Quandt test
gqtest(y1 ~ x, alternative="less")
gqtest(y2 ~ x)
# }
# NOT RUN {
## generate a regressor
x <- 0.01*c(1:100)
## generate heteroskedastic and homoskedastic disturbances
err1 <- c(rnorm(50, sd=1), rnorm(50, sd=2))
err2 <- rnorm(100)
## generate a linear relationship
y1 <- x + err1
y2 <- x + err2
## perform Goldfeld-Quandt test
gqtest(y1 ~ x, alternative="two.sided")
gqtest(y2 ~ x)
# }
# NOT RUN {
## generate a regressor
x <- c(1:100)
## generate heteroskedastic and homoskedastic disturbances
err1 <- c(rnorm(50, sd=1), rnorm(50, sd=2))
err2 <- rnorm(100)
## generate a linear relationship
y1 <- x + err1
y2 <- x + err2
## perform Goldfeld-Quandt test
gqtest(y1 ~ x)
gqtest(y2 ~ x)
# }
# NOT RUN {
## generate a regressor
x <- c(1:100)
## generate heteroskedastic and homoskedastic disturbances
err1 <- c(rnorm(50, sd=1), rnorm(50, sd=2))
err2 <- rnorm(100)
## generate a linear relationship
y1 <- x + err1
y2 <- x + err2
## perform Goldfeld-Quandt test
gqtest(y1 ~ x)
gqtest(y2 ~ x)
# }
## Heteroscedasticity
"""
Goldfeld-Quandt Test – This test is used to test the presence of Heteroscedasticity in the given data.
Null Hypothesis: Heteroscedasticity is not present.
Alternate Hypothesis: Heteroscedasticity is present.
"""
# Library
library(lmtest)
# Reading CSV file
Data <- read.csv("Dataset/Data.csv")
# Target Bridges
Bridges <- list("BrooklynBridge","ManhattanBridge","WilliamsburgBridge","QueensboroBridge")
# Parameters
Parameters <- list("HighTemp","LowTemp","Precipitation")
# Hypothesis Testing
for (b in Bridges){
x <- Data[,"HighTemp"]
y <- Data[,b]
Model <- lm(y~x)
print (paste("HighTemp vs ", b, sep=""))
print(gqtest(Model, order.by=~HighTemp, data=Data[c(b,"HighTemp")]))
print ("--------------------------------------------------------------------")
}
## generate two AR(1) error terms with parameter
## rho = 0 (white noise) and rho = 0.9 respectively
err1 <- rnorm(100)
## generate regressor and dependent variable
x <- rep(c(-1,1), 50)
y1 <- 1 + x + err1
## perform Durbin-Watson test
dwtest(y1 ~ x)
err2 <- filter(err1, 0.9, method="recursive")
y2 <- 1 + x + err2
dwtest(y2 ~ x)
## Autocorrelation
"""
Durbin–Watson statistic is a test statistic used to detect the presence of autocorrelation
Null Hypothesis: No Autocorrelation
Alternate Hypothesis: Autocorrelation is present.
"""
# Library
library(lmtest)
# Reading CSV file
Data <- read.csv("Dataset/Data.csv")
# Target Bridges
Bridges <- list("BrooklynBridge","ManhattanBridge","WilliamsburgBridge","QueensboroBridge")
# Parameters
Parameters <- list("HighTemp","LowTemp","Precipitation")
# Hypothesis Testing
for (b in Bridges){
x <- Data[,"HighTemp"]
y <- Data[,b]
Model <- lm(y~x)
print (paste("HighTemp vs ", b, sep=""))
print(dwtest(Model, order.by=~HighTemp, data=Data[c(b,"HighTemp")]))
print ("--------------------------------------------------------------------")
}
## Scatter Plot
# Reading CSV file
Data <- read.csv("Dataset/Data.csv")
# Target Bridges
Bridges <- list("BrooklynBridge","ManhattanBridge","WilliamsburgBridge","QueensboroBridge")
# Parameters
Parameters <- list("HighTemp","LowTemp","Precipitation")
# Scatter Plots
for (b in Bridges){
for (p in Parameters){
Title <- paste(p,"vs",b)
FileName <- paste("Scatter Plot of ",p," vs ",b,".png",sep = "")
png(file=FileName)
plot(x=Data[,p],
y=Data[,b],
xlab=p,
ylab=b,
main=Title,
col="red"
)
dev.off()
}
}
## Linear Regression
# Reading CSV file
Data <- read.csv("Dataset/Data.csv")
# Target Bridges
Bridges <- list("BrooklynBridge","ManhattanBridge","WilliamsburgBridge","QueensboroBridge")
# Parameters
Parameters <- list("HighTemp","LowTemp","Precipitation")
# Linear Regression Models
for (b in Bridges){
x <- Data[,"HighTemp"]
y <- Data[,b]
Model <- lm(y~x)
Title <- paste("Linear Regression of",b)
FileName <- paste("Linear Regression of ",b,".png",sep="")
png(file=FileName)
plot(x,
y,
col = "blue",
main = Title,
abline(lm(x~y)),
cex = 1.3,pch = 16,
xlab = "HighTemp",
ylab = b)
dev.off()
}
## Correlation
# Library
library(corrplot)
# Reading CSV file
Data <- read.csv("Dataset/Data.csv")
# Target Bridges
Bridges <- list("BrooklynBridge","ManhattanBridge","WilliamsburgBridge","QueensboroBridge")
# Parameters
Parameters <- list("HighTemp","LowTemp","Precipitation")
# Calculating Correlation
M <- cor(Data[sapply(Data,is.numeric)])
corrplot(M,method="number")
## Autocorrelation
"""
Durbin–Watson statistic is a test statistic used to detect the presence of autocorrelation
Null Hypothesis: No Autocorrelation
Alternate Hypothesis: Autocorrelation is present.
"""
# Library
library(lmtest)
# Reading CSV file
Data <- read.csv("Dataset/Data.csv")
# Target Bridges
Bridges <- list("BrooklynBridge","ManhattanBridge","WilliamsburgBridge","QueensboroBridge")
# Parameters
Parameters <- list("HighTemp","LowTemp","Precipitation")
# Hypothesis Testing
for (b in Bridges){
x <- Data[,"HighTemp"]
y <- Data[,b]
Model <- lm(y~x)
print (paste("HighTemp vs ", b, sep=""))
print(dwtest(Model, order.by=~HighTemp, data=Data[c(b,"HighTemp")]))
print ("--------------------------------------------------------------------")
}
## Checking Normality
# Reading CSV file
Data <- read.csv("Dataset/Data.csv")
# Target Bridges
Bridges <- list("BrooklynBridge","ManhattanBridge","WilliamsburgBridge","QueensboroBridge")
# Parameters
Parameters <- list("HighTemp","LowTemp","Precipitation")
# QQPlot: As Target Bridges are outputs, we shall check whether they follow normality or not
for (p in Bridges){
Title <- paste("QQPlot of",p)
FileName <- paste("QQPlot of ",p,".png",sep="")
png(file=FileName)
qqnorm(Data[,p])
qqline(Data[,p], col = "darkred")
dev.off()
}
## Heteroscedasticity
"""
Goldfeld-Quandt Test – This test is used to test the presence of Heteroscedasticity in the given data.
Null Hypothesis: Homoscedasticity is present.
Alternate Hypothesis: Heteroscedasticity is present.
"""
# Library
library(lmtest)
# Reading CSV file
Data <- read.csv("Dataset/Data.csv")
# Target Bridges
Bridges <- list("BrooklynBridge","ManhattanBridge","WilliamsburgBridge","QueensboroBridge")
# Parameters
Parameters <- list("HighTemp","LowTemp","Precipitation")
# Hypothesis Testing
for (b in Bridges){
x <- Data[,"HighTemp"]
y <- Data[,b]
Model <- lm(y~x)
print (paste("HighTemp vs ", b, sep=""))
print(gqtest(Model, order.by=~HighTemp, data=Data[c(b,"HighTemp")]))
print ("--------------------------------------------------------------------")
}
## Linear Regression
# Reading CSV file
Data <- read.csv("Dataset/Data.csv")
# Target Bridges
Bridges <- list("BrooklynBridge","ManhattanBridge","WilliamsburgBridge","QueensboroBridge")
# Parameters
Parameters <- list("HighTemp","LowTemp","Precipitation")
# Linear Regression Models
for (b in Bridges){
x <- Data[,"HighTemp"]
y <- Data[,b]
Model <- lm(y~x)
Title <- paste("Linear Regression of",b)
FileName <- paste("Linear Regression of ",b,".png",sep="")
png(file=FileName)
plot(x,
y,
col = "blue",
main = Title,
abline(lm(y~x)),
cex = 1.3,pch = 16,
xlab = "HighTemp",
ylab = b)
dev.off()
}
## Scatter Plot
# Reading CSV file
Data <- read.csv("Dataset/Data.csv")
print (head(Data))
# Target Bridges
Bridges <- list("BrooklynBridge","ManhattanBridge","WilliamsburgBridge","QueensboroBridge")
# Parameters
Parameters <- list("HighTemp","LowTemp","Precipitation")
# Scatter Plots
for (b in Bridges){
for (p in Parameters){
Title <- paste(p,"vs",b)
FileName <- paste("Scatter Plot of ",p," vs ",b,".png",sep = "")
png(file=FileName)
plot(x=Data[,p],
y=Data[,b],
xlab=p,
ylab=b,
main=Title,
col="red"
)
dev.off()
}
}
## Linear Regression
# Reading CSV file
Data <- read.csv("Dataset/Data.csv")
# Target Bridges
Bridges <- list("BrooklynBridge","ManhattanBridge","WilliamsburgBridge","QueensboroBridge")
# Parameters
Parameters <- list("HighTemp","LowTemp","Precipitation")
# Linear Regression Models
for (b in Bridges){
x <- Data[,"HighTemp"]
y <- Data[,b]
print (paste("HighTemp vs",b))
Model <- lm(y~x)
print (summary(Model))
Title <- paste("Linear Regression of",b)
FileName <- paste("Linear Regression of ",b,".png",sep="")
png(file=FileName)
plot(x,
y,
col = "blue",
main = Title,
abline(lm(y~x)),
cex = 1.3,pch = 16,
xlab = "HighTemp",
ylab = b)
dev.off()
}
## Heteroscedasticity
"""
Goldfeld-Quandt Test – This test is used to test the presence of Heteroscedasticity in the given data.
Null Hypothesis: Homoscedasticity is present.
Alternate Hypothesis: Heteroscedasticity is present.
"""
# Library
library(lmtest)
# Reading CSV file
Data <- read.csv("Dataset/Data.csv")
# Target Bridges
Bridges <- list("BrooklynBridge","ManhattanBridge","WilliamsburgBridge","QueensboroBridge")
# Parameters
Parameters <- list("HighTemp","LowTemp","Precipitation")
# Hypothesis Testing
for (b in Bridges){
x <- Data[,"HighTemp"]
y <- Data[,b]
Model <- lm(y~x)
print (paste("HighTemp vs ", b, sep=""))
print(gqtest(Model, order.by=~HighTemp, data=Data[c(b,"HighTemp")]))
print ("--------------------------------------------------------------------")
}
# Target Bridges
Bridges <- list("BrooklynBridge","ManhattanBridge","WilliamsburgBridge","QueensboroBridge")
## Autocorrelation
"""
Durbin–Watson statistic is a test statistic used to detect the presence of autocorrelation
Null Hypothesis: No Autocorrelation
Alternate Hypothesis: Autocorrelation is present.
"""
# Library
library(lmtest)
# Reading CSV file
Data <- read.csv("Dataset/Data.csv")
# Target Bridges
Bridges <- list("BrooklynBridge","ManhattanBridge","WilliamsburgBridge","QueensboroBridge")
# Parameters
Parameters <- list("HighTemp","LowTemp","Precipitation")
# Hypothesis Testing
for (b in Bridges){
x <- Data[,"HighTemp"]
y <- Data[,b]
Model <- lm(y~x)
print (paste("HighTemp vs ", b, sep=""))
print(dwtest(Model, order.by=~HighTemp, data=Data[c(b,"HighTemp")]))
print ("--------------------------------------------------------------------")
}
# NOT RUN {
## generate a regressor
x <- rep(c(-1,1), 50)
## generate heteroskedastic and homoskedastic disturbances
err1 <- c(rnorm(50, sd=1), rnorm(50, sd=2))
err2 <- rnorm(100)
## generate a linear relationship
y1 <- 1 + x + err1
y2 <- 1 + x + err2
## perform Goldfeld-Quandt test
gqtest(y1 ~ x)
gqtest(y2 ~ x)
# }
# NOT RUN {
## generate a regressor
x <- rep(c(-1,1), 50)
## generate heteroskedastic and homoskedastic disturbances
err1 <- c(rnorm(50, sd=1), rnorm(50, sd=2))
err2 <- rnorm(100)
## generate a linear relationship
y1 <- 1 + x + err1
y2 <- 1 + x + err2
## perform Goldfeld-Quandt test
gqtest(y1 ~ x)
gqtest(y2 ~ x)
# }
## generate two AR(1) error terms with parameter
## rho = 0 (white noise) and rho = 0.9 respectively
err1 <- rnorm(100)
## generate regressor and dependent variable
x <- rep(c(-1,1), 50)
y1 <- 1 + x + err1
## perform Durbin-Watson test
dwtest(y1 ~ x)
err2 <- filter(err1, 0.9, method="recursive")
y2 <- 1 + x + err2
dwtest(y2 ~ x)
## Autocorrelation
"""
Durbin–Watson statistic is a test statistic used to detect the presence of autocorrelation
Null Hypothesis: No Autocorrelation
Alternate Hypothesis: Autocorrelation is present.
"""
# Library
library(lmtest)
# Reading CSV file
Data <- read.csv("Dataset/Data.csv")
# Target Bridges
Bridges <- list("BrooklynBridge","ManhattanBridge","WilliamsburgBridge","QueensboroBridge")
# Parameters
Parameters <- list("HighTemp","LowTemp","Precipitation")
# Hypothesis Testing
for (b in Bridges){
x <- Data[,"HighTemp"]
y <- Data[,b]
Model <- lm(y~x)
print (paste("HighTemp vs ", b, sep=""))
print(dwtest(Model, order.by=~HighTemp, data=Data[c(b,"HighTemp")]))
print ("--------------------------------------------------------------------")
}
